// Copyright 2015, University of Freiburg,
// Chair of Artificial Intelligence.
// Author: Tim Schulte <schultet@informatik.uni-freiburg.de>.
package main

import (
	"fmt"
	"log"
	"os"
	"runtime"
	"time"

	"github.com/schultet/goa/pkg/comm"
	"github.com/schultet/goa/pkg/opt"
	"github.com/schultet/goa/pkg/search"
	"github.com/schultet/goa/pkg/task"
)

var (
	// DEBUG flag
	DEBUG = false
	// PORT is the default port for agent communication
	PORT = 3035
	// HOST is the default host for agent communication
	HOST = "127.0.0.1"
)

func main() {
	//defer profile.Start(profile.CPUProfile, profile.ProfilePath("."), profile.NoShutdownHook).Stop()
	runtime.GOMAXPROCS(runtime.NumCPU())
	Execute()
}

// Execute executes planner commands. Currently only the search-command is
// implemented.
func Execute() {
	opts := generalOptions()
	opts.ParseUnforgiving(os.Args)
	problems := opts.GetList("problem")
	agents, err := comm.NewConnList(opts.GetList("agent"))

	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	RunAgent(problems[0], agents, opts) // run planner as individual process
}

// RunAgent initializes task, heuristic, engine, and strategy, then starts the
// search process by calling engine.Search()
func RunAgent(problem string, agents comm.ConnList, opts *opt.OptionSet) {
	t, err := task.NewTaskFromFile(problem)
	if err != nil {
		log.Fatalf("%v\n", err)
	}
	server, dispatcher := comm.CreateTCPComm(t.AgentID, agents)
	engine := search.NewEngine(t, server, dispatcher, agents, opts)
	engine.Search(time.Second * time.Duration(opts.GetFloat64("timeout")))
}

// generalOptions defines the planners opt options, that can be parsed later
func generalOptions() *opt.OptionSet {
	opts := opt.NewOptionSet()
	opts.Add(opt.NewOption(opt.String, "search", 's', "", "search options"))
	opts.Add(opt.NewOption(opt.List, "agent", 'a',
		"for each involved agent specify its id, host, and port",
		"\"<id> <host> <port>\""))
	opts.Add(opt.NewOption(opt.List, "problem", 'p',
		"problem file in json format as generated by translate script. "+
			"If multiple files are provided, agents are run in threads "+
			"using go-channels instead of tcp/ip communication.",
		"domain/problem.json"))
	opts.Add(opt.NewOption(opt.List, "heuristic", 'h', "", "heur options"))
	opts.Add(opt.NewOption(opt.String, "pruning", ' ', "none", "action pruning method. Values: [none|sss]"))
	opts.Add(opt.NewOption(opt.Bool, "macros", 'm', "",
		"use macro projections"))
	opts.Add(opt.NewOption(opt.Float64, "timeout", 'x', "1800.0",
		"time budget in seconds"))
	opts.Add(opt.NewOption(opt.Int32, "planlimit", 'q', 1, "number of plans to generate"))
	opts.Add(opt.NewOption(opt.String, "logfile", 'l', "", "write logs to file"))
	opts.Add(opt.NewOption(opt.Bool, "nature", 'n', "", "add nature agent -> continual planning"))
	return opts
}
